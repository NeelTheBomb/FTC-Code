package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name="2023TeleOp", group="Linear Opmode")
public class Teleop2023 extends LinearOpMode {
    private Servo gripper = null;
    private DcMotorEx fl = null;
    private DcMotorEx bl = null;
    private DcMotorEx fr = null;
    private DcMotorEx br = null;
    private DcMotorEx uArm = null;
    private DcMotorEx lArm = null;
    private DcMotorEx intake = null;
    
    // movement constants
    private final double MAX_SPEED = .75;
    private final double MAX_ROTATION_SPEED = 1;
    private final double TURN_SPEED = 1;
    
    private double newLeftStickX = 0;
    private double newLeftStickY = 0;
    private double newRightStickX = 0;
    private double newRightStickY = 0;
    
    private final double ARM_LENGTH_1 = 14.5; // in
    private final double ARM_LENGTH_2 = 12.5; // in
    
    private final double ARM_VELOCITY = 5.0;
    
    private double armTargetX = 0;
    private double armTargetY = 0;
    
    // arm should always start horizontally on the intake side
    private final int armPositions[] = {
        0,
        950
    };
    
    private double lastValidArmTargetX;
    private double lastValidArmTargetY;
    
    double rx = 0;
    
    //THESE ARE PID GLOBAL
    public double lArmPastError = 0;
    public double lArmPastIntegral = 0;
    
    public double uArmPastError = 0;
    public double uArmPastIntegral = 0;
    
    public double iterationTime = 0;


    @Override
    public void runOpMode() {
        // Declare our motors
        // Make sure your ID's match your configuration
        fl = hardwareMap.get(DcMotorEx.class, "frontLeft");
        bl = hardwareMap.get(DcMotorEx.class, "backLeft");
        fr = hardwareMap.get(DcMotorEx.class, "frontRight");
        br = hardwareMap.get(DcMotorEx.class, "backRight");
        
        lArm = hardwareMap.get(DcMotorEx.class, "lArm");
        uArm = hardwareMap.get(DcMotorEx.class, "uArm");
        intake = hardwareMap.get(DcMotorEx.class, "intake");
        // uArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        // lArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        lArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        uArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       
        // Reverse the right side motors
        // Reverse left motors if you are using NeveRests
        fr.setDirection(DcMotorSimple.Direction.REVERSE);
        br.setDirection(DcMotorSimple.Direction.REVERSE);
        // Retrieve the IMU from the hardware map
        BNO055IMU imu = hardwareMap.get(BNO055IMU.class, "gyro");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        // Technically this is the default, however specifying it is clearer
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        // Without this, data retrieving from the IMU throws an exception
        imu.initialize(parameters);
        // armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        waitForStart();
        
        if (isStopRequested()) {
            return;
        }

        while (opModeIsActive()) {
            //start of iterationTime
            telemetry.addData("Positions; ", lArm.getCurrentPosition());
            double start = System.nanoTime();
            
            double y = gamepad1.left_stick_y * .9; // Remember, this is reversed!
            double x = -gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
 
            // Read inverse IMU heading, as the IMU heading is CW positive
            double botHeading = -imu.getAngularOrientation().firstAngle;
            telemetry.addData("botheading", Math.toDegrees(botHeading));

            double rotX = (x * Math.cos(botHeading) - y * Math.sin(botHeading)) / 2;
            double rotY = (x * Math.sin(botHeading) + y * Math.cos(botHeading)) / 2;
            double rx = ((gamepad1.right_stick_y) * Math.sin(botHeading) + (gamepad1.right_stick_x) *Math.cos(botHeading));
            // double rotX = x;
            // double rotY = y;
            // double rx = gamepad1.right_stick_x * .5;
            if (gamepad1.dpad_up) {
                rotY = 1;
            }
            if (gamepad2.dpad_down) {
                rotY = -1;
            }
            
            // if (gamepad1.right_stick_x != 0 || gamepad1.right_stick_y != 0) {
            //     telemetry.addData("works", "works");
                
            //     rx = -2 * sticksAndImuToTurn(gamepad1.right_stick_x, 
            //             gamepad1.right_stick_y, 
            //             -imu.getAngularOrientation().firstAngle); 
            // }
                
            //rx = (newRightStickx * Math.cos(botHeading) - newRightSticky * Math.sin(botHeading));

            double denominator = Math.max(Math.abs(y) + Math.abs(x) + (rx), 1);
            double frontLeftPower = (rotY + rotX - rx) / denominator;
            double backLeftPower = (rotY - rotX - rx) / denominator;
            double frontRightPower = (rotY - rotX + rx) / denominator;
            double backRightPower = (rotY + rotX  + rx) / denominator;

            fl.setPower(frontLeftPower * MAX_SPEED);
            bl.setPower(backLeftPower * MAX_SPEED);
            fr.setPower(frontRightPower * MAX_SPEED);
            br.setPower(backRightPower * MAX_SPEED);
            
            telemetry.addData("larm tick", lArm.getCurrentPosition());
            telemetry.addData("uarm tick", uArm.getCurrentPosition());
            
            double lEncoderUpperThreshold = 1300;  //these values are not calibrated
            double lEncoderLowerThreshold = -20; //these values are not calibrated
            double lEncoderPos = lArm.getCurrentPosition();
            
            if (Math.abs(-gamepad2.left_stick_y) > .1 || Math.abs(gamepad2.left_stick_x) > .1) {
                double armangle = Math.atan2(-gamepad2.left_stick_y, gamepad2.left_stick_x);
                double armTargetX = Math.cos(armangle) * (ARM_LENGTH_1 + ARM_LENGTH_2);
                double armTargetY = Math.sin(armangle) * (ARM_LENGTH_1 + ARM_LENGTH_2); 
            
                // if ((lEncoderPos <= lEncoderUpperThreshold) && (lEncoderPos > lEncoderLowerThreshold)){
                //     moveArm(armTargetX, armTargetY); 
                // }
            }
            
            telemetry.addData("realx", armTargetX);
            telemetry.addData("realy", armTargetY);
            
            intake.setPower(0);
            //intake control
            if (gamepad1.right_trigger > .2) {
                intake.setPower(-gamepad1.right_trigger/4);
            }
            if (gamepad1.left_trigger > .2) {
                intake.setPower(gamepad1.left_trigger);
            }
            
            //end of iterationTime
            double end = System.nanoTime();
            //iterationtime
            iterationTime = start-end;
            
            telemetry.update();
            
            // lArm.setTargetPosition(armPositions[1]);
            // lArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            // lArm.setVelocity(200);
            telemetry.addData("lArm tick", lArm.getCurrentPosition());
        }
    }
    
    
    public double stickToDegrees(float x,float y) {
        //just saving the values
        float xsave = x;
        float ysave = y;
            
        //swapping x and y
        x = ysave;
        y = xsave;
        //y = -y;
        x = -x;
        double angle = Math.atan2(y,x);
        return angle;
    }
        
            
    public double angleDifference(double actual, double desired) {  //TODO: rewrite, sucks ass, bad
        /* if (actual > 180) { 
            actual = actual-360;
        } */
        
        double angle = actual - desired;
        double primary = angle;
        double secondary = (2*Math.PI) - Math.abs(angle);
        
        if (Math.abs(angle) < secondary) {
            primary = angle; 
        }
        if (secondary < Math.abs(angle)) {
            primary = secondary;
        }
        
        return primary;
    }
        
        
    public double remap_range(double old_min, double old_max, double new_min, 
            double new_max, double value) {
        
        return new_min + (value - old_min) * ((new_max - new_min) 
                / (old_max - old_min));
    }
        
        
    public double sticksAndImuToTurn(float x,float y, double botHeading) {
        double angle = stickToDegrees(x, y);
        double angleFromRobot = angleDifference(botHeading, angle);
        
        return remap_range(-2 * Math.PI, 2 * Math.PI, -1, 1, angleFromRobot);
    }
        
        
    private double[] getTargetArmAngles(double targetX, double targetY) {
        double num = (targetX * targetX) + (targetY * targetY) 
                - (ARM_LENGTH_1 * ARM_LENGTH_1) - (ARM_LENGTH_2 * ARM_LENGTH_2);
                
        double den = 2 * ARM_LENGTH_1 * ARM_LENGTH_2;
        
        double arm2TargetAngle = Math.acos(num / den);
            
        num = ARM_LENGTH_2 * Math.sin(arm2TargetAngle);
        den = ARM_LENGTH_1 + (ARM_LENGTH_2 * Math.cos(arm2TargetAngle));
        
        double arm1TargetAngle = Math.atan(targetY / targetX) 
                - Math.atan(num / den);
                
        double[] angles = {arm1TargetAngle, arm2TargetAngle};
        
        return angles;
    }
    
    
    public void moveArm(double targetX, double targetY) {
        double lArmCoefficient = 1873/360;
        double uArmCoefficient = 1873/360;
        
        double[] targetAngles = getTargetArmAngles(targetX, targetY);
        
        if (!Double.isNaN(targetAngles[0]) && !Double.isNaN(targetAngles[1])) {
            lastValidArmTargetX = targetX;
            lastValidArmTargetY = targetY;
        }
        else {
            targetX = lastValidArmTargetX;
            targetY = lastValidArmTargetY;
            armTargetX = targetX;
            armTargetY = targetY;
            targetAngles = getTargetArmAngles(targetX, targetY);
            telemetry.addData("NAN", "NAN");
        }


        // lArm.setTargetPosition((int)(targetX * lArmCoefficient * 180/3.14)); // Adjust this number
        // uArm.setTargetPosition((int)(targetY * lArmCoefficient * 180/3.14));
        // if (uArm.getTargetPosition() > 1 && uArm.getTargetPosition() < -1)
        
            // uArm.setTargetPosition((14));
            // uArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            // uArm.setVelocity(1);
            
        //lArm.setTargetPosition((int)(50));
        uArm.setMode(DcMotorEx.RunMode.RUN_WITHOUT_ENCODERS);
        lArm.setMode(DcMotorEx.RunMode.RUN_WITHOUT_ENCODERS);
        
        
        // if ((14-Math.abs(uArm.getTargetPosition())) > 2) {
        //     // uArm.setPower((int)(14 - uArm.getTargetPosition()/14));
        //     uArm.setPower(1);}
        
        double tolerance = 5;
        double targetLower = (int)(Math.abs(targetAngles[0]) * lArmCoefficient*180/3.14);
        double targetUpper = (int)(targetAngles[1] * lArmCoefficient*180/3.14);
        double actualLower = lArm.getCurrentPosition();
        double actualUpper = -uArm.getCurrentPosition();
        // targetLower = 300;
   
        // lArm.setPower(.62);
        
        // moveArm(actualLower, targetLower, actualUpper, targetUpper, tolerance);    
        
        
        // if (Math.abs(actualLower-targetLower) > tolerance) {
        //     double Ldifference = -(actualLower-targetLower);
        //     double Kp = .5;
        //     double Ki = .01;
        //     double Kd = .1;
        //     //using the PID
        //     double[] lArmPID = PID(Kp, Kd, Ki, actualLower, Ldifference, iterationTime, lArmPastIntegral, lArmPastError);
        //     Ldifference = lArmPID[0];
        //     lArmPastError= lArmPID[1];
        //     lArmPastIntegral = lArmPID[2];
        //     //clamping and remapping the power
        //     double Lmove = remap_range(-100, 100, -.2, .2, Ldifference);
        //     Lmove = clamp(-.2, .2, Lmove);
        //     telemetry.addData("larmPower", Lmove);
        //     lArm.setPower(Lmove);
        // }
        // if (Math.abs(actualUpper-targetUpper) > tolerance) {
        //     double Udifference = -(actualUpper-targetUpper);
        //     double Kp = .5;
        //     double Ki = .01;
        //     double Kd = .1;
        //     double Umove = remap_range(-100, 100, -.4, .4, Udifference);
        //     double[] uArmPID = PID(Kp, Kd, Ki, actualUpper, Udifference, iterationTime, uArmPastIntegral, uArmPastError);
        //     Udifference = uArmPID[0];
        //     uArmPastError= uArmPID[1];
        //     uArmPastIntegral = uArmPID[2];
        //     Umove = clamp(-.4, .4, Umove);
        //     uArm.setPower(-Umove);
        // }
        
        // telemetry.addData("targetX", targetX);
        // telemetry.addData("targetY", targetY);
        // telemetry.addData("larm angle", (int)(Math.abs(targetAngles[0]) * lArmCoefficient*180/3.14));
        // telemetry.addData("uarm angle", targetAngles[1]);
        // telemetry.addData("larm tick", lArm.getCurrentPosition());
        // telemetry.addData("uarm tick", uArm.getCurrentPosition());
        
    }
    
    
    public double clamp(double min, double max, double value) {
        if (value > max) {value = max;}
        if (value < min) {value = min;}
        return value;
    }


    //there needs to be 2 global variables for this to work: error_prior and integral_prior
    public double[] PID(double Kp, double Kd, double Ki, double actual_value, double desired_value, double iteration_time, double integral_prior, double error_prior) {
        double error = desired_value - actual_value;
        double integral = integral_prior + error * iteration_time;
        double derivative = (error - error_prior) / iteration_time;
        double output = Kp*error + Ki*integral + Kd*derivative;
        error_prior = error;
        integral_prior = integral;
        return new double[] {output, error_prior, integral_prior};
    }
    
    //this function moves both arms using a PID control
    public void moveArm(double actualLower, double targetLower, double actualUpper, double targetUpper, double tolerance) {
        if (Math.abs(actualLower-targetLower) > tolerance) {
            double Ldifference = -(actualLower - targetLower);
            double Kp = .5;
            double Ki = .01;
            double Kd = .1;
            //using the PID
            double[] lArmPID = PID(Kp, Kd, Ki, actualLower, Ldifference, iterationTime, lArmPastIntegral, lArmPastError);
            Ldifference = lArmPID[0];
            lArmPastError= lArmPID[1];
            lArmPastIntegral = lArmPID[2];
            //clamping and remapping the power
            double Lmove = remap_range(-100, 100, -.2, .2, Ldifference);
            Lmove = clamp(-.2, .2, Lmove);
            telemetry.addData("larmPower", Lmove);
            lArm.setPower(Lmove);
        }
        if (Math.abs(actualUpper-targetUpper) > tolerance) {
            double Udifference = -(actualUpper-targetUpper);
            double Kp = .5;
            double Ki = .01;
            double Kd = .1;
            double Umove = remap_range(-100, 100, -.4, .4, Udifference);
            double[] uArmPID = PID(Kp, Kd, Ki, actualUpper, Udifference, iterationTime, uArmPastIntegral, uArmPastError);
            Udifference = uArmPID[0];
            uArmPastError= uArmPID[1];
            uArmPastIntegral = uArmPID[2];
            Umove = clamp(-.4, .4, Umove);
            uArm.setPower(-Umove);
        }
        
    }
    
    //this just moves the upper arm with PID control
    public void MoveUpperArm(double actualUpper, double targetUpper, double tolerance) {
        if (Math.abs(actualUpper-targetUpper) > tolerance) {
            double Udifference = -(actualUpper-targetUpper);
            double Kp = .5;
            double Ki = .01;
            double Kd = .1;
            double Umove = remap_range(-100, 100, -.4, .4, Udifference);
            double[] uArmPID = PID(Kp, Kd, Ki, actualUpper, Udifference, iterationTime, uArmPastIntegral, uArmPastError);
            Udifference = uArmPID[0];
            uArmPastError= uArmPID[1];
            uArmPastIntegral = uArmPID[2];
            Umove = clamp(-.4, .4, Umove);
            uArm.setPower(-Umove);
        }
    }
    
    //this moves lower arm with PID control
    public void MoveLowerArm(double actualLower, double targetLower, double tolerance) {
        if (Math.abs(actualLower-targetLower) > tolerance) {
            double Ldifference = -(actualLower-targetLower);
            double Kp = .5;
            double Ki = .01;
            double Kd = .1;
            
            //using the PID
            double[] lArmPID = PID(Kp, Kd, Ki, actualLower, Ldifference, iterationTime, lArmPastIntegral, lArmPastError);
            Ldifference = lArmPID[0];
            lArmPastError= lArmPID[1];
            lArmPastIntegral = lArmPID[2];
            
            //clamping and remapping the power
            double Lmove = remap_range(-100, 100, -.2, .2, Ldifference);
            Lmove = clamp(-.2, .2, Lmove);
            telemetry.addData("larmPower", Lmove);
            lArm.setPower(Lmove);
        }
        
    }
    
    //this will move the arm to pickup position
    public void MoveArmStartingPosition() {
        double actualLower = lArm.getCurrentPosition();
        double actualUpper = -uArm.getCurrentPosition();
        double tolerance = 10; //this value has not been tuned yet
        double targetUpper = -100; //this value has not been tuned yet
        double targetLower = 100; //this value has not been tuned yet
        if (Math.abs(actualUpper-targetUpper) > tolerance) {
            MoveUpperArm(actualUpper, targetUpper, tolerance/2);
        }
        else if (Math.abs(actualLower-targetLower) > tolerance) {
            MoveLowerArm(actualLower, targetLower, tolerance/2);
        }
        
    }
    
    //this move the arm safely outu of the intake
    public void MoveArmOutIntake() {
        double actualLower = lArm.getCurrentPosition();
        double actualUpper = -uArm.getCurrentPosition();
        double tolerance = 10; //this value has not been tuned yet
        double targetUpper = 200; //this value has not been tuned yet
        double targetLower = 500; //this value has not been tuned yet
        if (Math.abs(actualLower-targetLower) > tolerance) {
            MoveUpperArm(actualLower, targetLower, tolerance/2);
        }
        else if (Math.abs(actualUpper-targetUpper) > tolerance) {
            MoveLowerArm(actualUpper, targetUpper, tolerance/2);
        }
    }
}
