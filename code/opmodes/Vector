//made by Neel, may have syntax errors

//this is a class for a physics vectors, use this and import it into the teleop or autonomous somehow
public class Vector {
    double magnitude;
    double angle;
    double x;
    double y;

    public Vector(double m, double a) {
        this.magnitude = m;
        this.angle = a;
        this.x = Math.cos(a) * m;
        this.y = Math.sin(a) * m;
        
    }

    public Vector add(List<Vector> vectors) {
        double totaly = 0;
        double totalx = 0;
        for (i = 0; i < vectors.size(); i++) {
            totalx += vectors[i].x;
            totaly += vectors[i].y;
            
        double vectorangle = Math.atan(totaly/totalx);
        if (totalx < 0 && totaly >= 0) {
            angle = (Math.PI) - Math.abs(angle); }
        else if (totalx < 0 && totaly < 0) {
            angle = Math.PI + Math.abs(angle); }
        else if (totalx > 0 && totaly < 0) {
            angle = (Math.PI) * 2 - Math.abs(angle);
        }
        vectormagnitude = Math.sqr((totalx*totalx)+(totaly*totaly));
        return new Vector(vectormagnitude, vectorangle);  
        }
    }

    public double getx() {
        return this.x;
    }


    public double gety() {
        return this.y;
    }

    public double getmag() {
        return this.magnitude;
    }
    public double getangle() {
        return this.angle;
    }
}



//coming up are unrelated vector functions, you can implement this into a program to know the location of the robot on the field

//in this function, you put in the delta of all your wheel encoder changes and it returns a final vector
public Vector finalwheelvector(Vector deltafl, Vector deltafr, Vector deltabl, Vector deltabr) {
    Vector flvector = new Vector(deltafl, Math.pi/2);
    Vector frvector = new Vector(deltafr, -Math.pi/2);
    Vector blvector = new Vector(deltabl, -Math.pi/2);
    Vector brvector = new Vector(deltabl, Math.pi/2);
    List<Vector> wheelvectors = Arrays.asList(flvector, frvector, blvector, brvector);
    
    //just using a random vector to use the add function in the vector class
    Vector finalvector = flvector.add(wheelvectors);
    return finalvector;
}


//in this function, you give you last known position and the change vector, giving you the new position
public double newposition(double oldx, double oldy, Vector finalvector) {
    double xchange = finalvector.getx();
    double ychange = finalvector.gety();
    double newx = oldx + xchange;
    double newy = oldy + ychange;
    return newx, newy;
}


//this will return a x and y value that describes how much the wheels should move- think of this as the x and y of the joystick on last years movement code, divide constant adjusts how big the vector will be according to how faraway the desired position is
public Vector desiredVector(double currentx, double currenty, double desiredx, double desiredy, double divideconstant) {
    double movex = desiredx - currentx;
    double movey = desiredy - currenty;
    double wheelx = movex/divideconstant;
    double wheely = movey/divideconstant;

    double finalx = Math.min(wheelx, 1);
    finalx = Math.max(finalx, -1);
    double finaly = Math.min(wheely, 1);
    finaly = Math.max(finaly, 1);

    return wheelx, wheely;
    
}


