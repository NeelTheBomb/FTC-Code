package org.firstinspires.ftc.teamcode.Event2023;
import org.firstinspires.ftc.teamcode.*;
import java.util.Queue;


import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous

public class TestAutonomous2023 extends LinearOpMode{
    private DcMotorEx fl = null;
    private DcMotorEx bl = null;
    private DcMotorEx fr = null;
    private DcMotorEx br = null;
    private BNO055IMU imu = null;
    public double pastx = 0;
    public double pasty = 0;
    double targetx =100;
    double targety = 100;
    
    //public past encoder values
    public double flPastTick = 0;
    public double frPastTick = 0;
    public double blPastTick = 0;
    public double brPastTick = 0;
    
    @Override
    public void runOpMode() {
        fl = hardwareMap.get(DcMotorEx.class, "frontLeft");
        bl = hardwareMap.get(DcMotorEx.class, "backLeft");
        fr = hardwareMap.get(DcMotorEx.class, "frontRight");
        br = hardwareMap.get(DcMotorEx.class, "backRight");
        
        fl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        fr.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        bl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        br.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        imu = hardwareMap.get(BNO055IMU.class, "gyro");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        // Technically this is the default, however specifying it is clearer
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        // Without this, data retrieving from the IMU throws an exception
        imu.initialize(parameters);
        
        waitForStart();
        if (isStopRequested()) return;

        while (opModeIsActive()) {
            
        
        double flTick = fl.getCurrentPosition() - flPastTick;
        double frTick = fr.getCurrentPosition() - frPastTick;
        double blTick = bl.getCurrentPosition() - blPastTick;
        double brTick = br.getCurrentPosition() - brPastTick;
        Vector currentVector = finalwheelvector(flTick, frTick, blTick, brTick, 0.0);
        double[] pos = newposition(pastx, pasty, currentVector);
        pastx = pos[0];
        pasty = pos[1];
        telemetry.addData("pastx", pastx);
        telemetry.addData("pasty", pasty);
            
        telemetry.update();
        flPastTick = fl.getCurrentPosition();
        frPastTick = fr.getCurrentPosition();
        blPastTick = bl.getCurrentPosition();
        brPastTick = br.getCurrentPosition();
        
        
        double targetposx = 0;
        double targetposy = 0;
        double[] moveConstants = desiredVector(pastx, pasty, targetposx, targetposy, 10);
        
        }
        
    }
    
//in this function, you put in the delta of all your wheel encoder changes and it returns a final vector
public Vector finalwheelvector(double deltafl, double deltafr, double deltabl, double deltabr, double imu) {
    Vector flvector = new Vector(deltafl, Math.PI/2);
    Vector frvector = new Vector(deltafr, (3*Math.PI)/2);
    Vector blvector = new Vector(deltabl, (3*Math.PI)/2);
    Vector brvector = new Vector(deltabl, Math.PI/2);
    // List<Vector> wheelvectors = Arrays.asList(flvector, frvector, blvector, brvector);
    Vector[] wheelvectors = new Vector[] {flvector, frvector, blvector, brvector};
    //just using a random vector to use the add function in the vector class
    Vector finalVector = flvector.add(wheelvectors);
    Vector translatedVector = new Vector(finalVector.getMagnitude(), finalVector.getAngle() + imu);
    return translatedVector;
}


public double[] newposition(double oldx, double oldy, Vector finalvector) {
    double xchange = finalvector.getX();
    double ychange = finalvector.getY();
    double newx = oldx + xchange;
    double newy = oldy + ychange;
    double[] result = {newx,newy};
    return result;
}


//this will return a x and y value that describes how much the wheels should move- think of this as the x and y of the joystick on last years movement code, divide constant adjusts how big the vector will be according to how faraway the desired position is
public double[] desiredVector(double currentx, double currenty, double desiredx, double desiredy, double divideconstant) {
    double movex = desiredx - currentx;
    double movey = desiredy - currenty;
    double wheelx = movex/divideconstant;
    double wheely = movey/divideconstant;

    double finalx = Math.min(wheelx, 1);
    finalx = Math.max(finalx, -1);
    double finaly = Math.min(wheely, 1);
    finaly = Math.max(finaly, 1);

    return new double[] {finalx, finaly};
    
    }
    
private void robotMove() {
        // TODO: rename x and y. What do these do ????
        double x = -gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
        double y = gamepad1.left_stick_y * .9; // Remember, this is reversed!
        
        //MAX SPEED
        double MAX_SPEED = 1;
 
        // Read inverse IMU heading, as the IMU heading is CW positive
        double botHeading = -imu.getAngularOrientation().firstAngle;

        double rotX = (x * Math.cos(botHeading) - y * Math.sin(botHeading)) / 2;
        double rotY = (x * Math.sin(botHeading) + y * Math.cos(botHeading)) / 2;
        double rx = ((gamepad1.right_stick_y) * Math.sin(botHeading) + (gamepad1.right_stick_x) *Math.cos(botHeading));

        double denominator = Math.max(Math.abs(y) + Math.abs(x) + (rx), 1);
        double frontLeftPower = (rotY + rotX - rx) / denominator;
        double backLeftPower = (rotY - rotX - rx) / denominator;
        double frontRightPower = (rotY - rotX + rx) / denominator;
        double backRightPower = (rotY + rotX  + rx) / denominator;

        fl.setPower(frontLeftPower * MAX_SPEED);
        bl.setPower(backLeftPower * MAX_SPEED);
        fr.setPower(frontRightPower * MAX_SPEED);
        br.setPower(backRightPower * MAX_SPEED);
    }
}
