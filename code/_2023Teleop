package org.firstinspires.ftc.teamcode;

// our packages
import org.firstinspires.ftc.teamcode.Event2023.MathStuff;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.Gamepad;


@TeleOp(name="2023TeleOp", group="Linear Opmode")
public class Teleop2023 extends LinearOpMode {
    // initialize hardware variables
    private Servo gripper = null;
    private DcMotorEx fl = null;
    private DcMotorEx bl = null;
    private DcMotorEx fr = null;
    private DcMotorEx br = null;
    private DcMotorEx uArm = null;
    private DcMotorEx lArm = null;
    private DcMotorEx intake = null;
    private BNO055IMU imu = null;
    
    // movement constants
    private final double MAX_SPEED = 0.75;
    
    // arm constants
    // arm should always start horizontally on the intake side
    private final int[] L_ARM_POSITIONS = { 0, 950 };
    private final int[] U_ARM_POSITIONS = { 0, 770, 1000, 1200 };
    private final double U_ARM_VELOCITY = 1000.0;
    private final double L_ARM_VELOCITY = 500.0;
    
    // gripper constants
    private final double GRIPPER_CLOSE = 0.25;
    private final double GRIPPER_OPEN = 1.0;
    
    // smth to do with bot rotation
    // TODO: rename
    double rx = 0.0;
    

    @Override
    public void runOpMode() {
        // Declare our motors
        // Make sure your ID's match your configuration
        fl = hardwareMap.get(DcMotorEx.class, "frontLeft");
        bl = hardwareMap.get(DcMotorEx.class, "backLeft");
        fr = hardwareMap.get(DcMotorEx.class, "frontRight");
        br = hardwareMap.get(DcMotorEx.class, "backRight");
        lArm = hardwareMap.get(DcMotorEx.class, "lArm");
        uArm = hardwareMap.get(DcMotorEx.class, "uArm");
        intake = hardwareMap.get(DcMotorEx.class, "intake");
        
        // reset encoders to avoid problems
        uArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        lArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        // reverse right drive motors and upper arm
        fr.setDirection(DcMotorSimple.Direction.REVERSE);
        br.setDirection(DcMotorSimple.Direction.REVERSE);
        uArm.setDirection(DcMotorSimple.Direction.REVERSE);
        
        // Retrieve the IMU from the hardware map
        imu = hardwareMap.get(BNO055IMU.class, "gyro");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        // Technically this is the default, however specifying it is clearer
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        // Without this, data retrieving from the IMU throws an exception
        imu.initialize(parameters);
        
        // wait until init is pressed
        waitForStart();
        
        // move the lower arm down a bit and reset the encoder
        lArm.setTargetPosition(-40);
        lArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        while (opModeIsActive()) {
            robotMove();
            intake();
            arm();
            gripper();
        }
    }
    
    
    private void robotMove() {
        // TODO: rename x and y. What do these do ????
        double x = -gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
        double y = gamepad1.left_stick_y * .9; // Remember, this is reversed!
 
        // Read inverse IMU heading, as the IMU heading is CW positive
        double botHeading = -imu.getAngularOrientation().firstAngle;

        double rotX = (x * Math.cos(botHeading) - y * Math.sin(botHeading)) / 2;
        double rotY = (x * Math.sin(botHeading) + y * Math.cos(botHeading)) / 2;
        rx = ((gamepad1.right_stick_y) * Math.sin(botHeading) + (gamepad1.right_stick_x) *Math.cos(botHeading));

        double denominator = Math.max(Math.abs(y) + Math.abs(x) + (rx), 1);
        double frontLeftPower = (rotY + rotX - rx) / denominator;
        double backLeftPower = (rotY - rotX - rx) / denominator;
        double frontRightPower = (rotY - rotX + rx) / denominator;
        double backRightPower = (rotY + rotX  + rx) / denominator;

        fl.setPower(frontLeftPower * MAX_SPEED);
        bl.setPower(backLeftPower * MAX_SPEED);
        fr.setPower(frontRightPower * MAX_SPEED);
        br.setPower(backRightPower * MAX_SPEED);
    }
    
    
    private void intake() {
        //intake control
        if (gamepad1.right_trigger > 0.2) {
            intake.setPower(-gamepad1.right_trigger / 4);
        }
        else if (gamepad1.left_trigger > 0.2) {
            intake.setPower(gamepad1.left_trigger);
        }
        else {
            intake.setPower(0);
        }
    }
    
    
    private void arm() {
        // initialize at -1 to avoid compiler error
        int lArmTargetPos = -1;
        int uArmTargetPos = -1;
        boolean move = false;
        
        if (gamepad2.dpad_down) {
            lArmTargetPos = L_ARM_POSITIONS[0];
            uArmTargetPos = U_ARM_POSITIONS[0];
            move = true;
        }
        else if (gamepad2.dpad_left) {
            lArmTargetPos = L_ARM_POSITIONS[1];
            uArmTargetPos = U_ARM_POSITIONS[1];
            move = true;
        }
        else if (gamepad2.dpad_up) {
            lArmTargetPos = L_ARM_POSITIONS[1];
            uArmTargetPos = U_ARM_POSITIONS[2];
            move = true;
        }
        else if (gamepad2.dpad_right) {
            lArmTargetPos = L_ARM_POSITIONS[1];
            uArmTargetPos = U_ARM_POSITIONS[3];
            move = true;
        }
        
        // return if the arm shouldn't move
        if (!move) return;
        
        // lower arm
        lArm.setTargetPosition(lArmTargetPos);
        lArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        lArm.setVelocity(L_ARM_VELOCITY);
        
        // upper arm
        uArm.setTargetPosition(uArmTargetPos);
        uArm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        uArm.setVelocity(U_ARM_VELOCITY);
    }
    
    
    private void gripper() {
        
    }
}
